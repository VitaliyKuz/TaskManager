pipeline {
    agent any

    environment {
        AWS_SERVER_IP = credentials('aws-server-ip')
        DO_SERVER_IP = credentials('do-server-ip')
        DO_API_TOKEN = credentials('do-credentials-id')
        GIT_REPO = 'https://github.com/VitaliyKuz/TaskManager.git'
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    echo "Cloning repository from $GIT_REPO"
                }
                checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                          userRemoteConfigs: [[url: env.GIT_REPO]]])
            }
        }

        stage('Setup Environment') {
            parallel {
                stage('Prepare AWS Server') {
                    steps {
                        sshagent(['aws-ssh-key']) {
                            sh '''
                            ssh ec2-user@$AWS_SERVER_IP << 'EOF'
                            if ! command -v docker &> /dev/null; then
                                sudo yum install -y docker
                                sudo systemctl start docker
                                sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                                sudo chmod +x /usr/local/bin/docker-compose
                            fi
                            if [ ! -d "~/deploy/Docker" ]; then
                                sudo mkdir -p ~/deploy/Docker
                                sudo chown -R ec2-user:ec2-user ~/deploy
                            fi
                            cd ~/deploy
                            if [ ! -d "TaskManager" ]; then
                                git clone -b $GIT_BRANCH $GIT_REPO TaskManager
                            else
                                cd TaskManager
                                git reset --hard
                                git pull origin $GIT_BRANCH
                            fi
                            exit
EOF
                            '''
                        }
                    }
                }
                stage('Prepare DigitalOcean Server') {
                    steps {
                        sshagent(['do-ssh-key']) {
                            sh '''
                            ssh root@$DO_SERVER_IP << 'EOF'
                            if ! command -v docker &> /dev/null; then
                                curl -fsSL https://get.docker.com | sh
                                sudo chmod 666 /var/run/docker.sock
                            fi
                            cd /root/deploy
                            if [ ! -d "TaskManager" ]; then
                                git clone -b $GIT_BRANCH $GIT_REPO TaskManager
                            else
                                cd TaskManager
                                git reset --hard
                                git pull origin $GIT_BRANCH
                            fi
                            exit
EOF
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy Application') {
            parallel {
                stage('Deploy to AWS') {
                    steps {
                        sshagent(['aws-ssh-key']) {
                            sh '''
                            ssh ec2-user@$AWS_SERVER_IP << 'EOF'
                            if [ ! -d "~/deploy/Docker" ]; then
                                mkdir -p ~/deploy/Docker
                            fi
                            exit
EOF
                            scp -r Docker/* app digitalocean jenkins ec2-user@$AWS_SERVER_IP:~/deploy/
                            ssh ec2-user@$AWS_SERVER_IP << 'EOF'
                            if [ ! -f "~/deploy/Docker/prometheus.yml" ]; then
                                echo "Error: prometheus.yml not found in ~/deploy/Docker!"
                                exit 1
                            fi
                            cd ~/deploy
                            docker-compose down --remove-orphans || true
                            docker-compose up -d
                            exit
EOF
                            '''
                        }
                    }
                }
                stage('Deploy to DigitalOcean') {
                    steps {
                        sshagent(['do-ssh-key']) {
                            sh '''
                            ssh root@$DO_SERVER_IP << 'EOF'
                            if [ ! -d "/root/deploy/Docker" ]; then
                                mkdir -p /root/deploy/Docker
                            fi
                            exit
EOF
                            scp -r Docker/* app digitalocean jenkins root@$DO_SERVER_IP:/root/deploy/
                            ssh root@$DO_SERVER_IP << 'EOF'
                            if [ ! -f "/root/deploy/Docker/prometheus.yml" ]; then
                                echo "Error: prometheus.yml not found in /root/deploy/Docker!"
                                exit 1
                            fi
                            cd /root/deploy
                            docker-compose down --remove-orphans || true
                            docker-compose up -d
                            exit
EOF
                            '''
                        }
                    }
                }
            }
        }

        stage('Verify Deployment') {
            parallel {
                stage('Verify AWS') {
                    steps {
                        sh '''
                        curl -s http://$AWS_SERVER_IP:5000 || exit 1
                        '''
                    }
                }
                stage('Verify DigitalOcean') {
                    steps {
                        sh '''
                        curl -s http://$DO_SERVER_IP:5000 || exit 1
                        '''
                    }
                }
            }
        }
    }
}

pipeline {
    agent any

    environment {
        AWS_SERVER_IP = credentials('aws-server-ip')
        DO_SERVER_IP = credentials('do-server-ip')
        AWS_ACCESS_KEY_ID = credentials('aws-credentials-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-credentials-id')
        DO_API_TOKEN = credentials('do-credentials-id')
    }

    stages {
        stage('Setup Environment') {
            steps {
                script {
                    echo "Setting up environment variables..."
                }
            }
        }

        stage('Generate .env Files') {
            steps {
                writeFile file: '.env', text: """
                AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}
                AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}
                DO_API_TOKEN=${env.DO_API_TOKEN}
                POSTGRES_USER=user
                POSTGRES_PASSWORD=1
                POSTGRES_DB=task_manager
                FLASK_APP=app.py
                """
                echo "Environment file generated successfully."
            }
        }

        stage('Prepare AWS Server') {
            steps {
                sshagent(['aws-ssh-key']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ec2-user@$AWS_SERVER_IP << EOF
                    sudo yum install -y docker || true
                    sudo systemctl enable docker
                    sudo systemctl start docker
                    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                    sudo chmod +x /usr/local/bin/docker-compose
                    mkdir -p ~/deploy
                    exit
EOF
                    '''
                }
            }
        }

        stage('Prepare DigitalOcean Server') {
            steps {
                sshagent(['do-ssh-key']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no root@$DO_SERVER_IP << EOF
                    curl -fsSL https://get.docker.com -o get-docker.sh
                    sh get-docker.sh
                    sudo chmod 666 /var/run/docker.sock
                    mkdir -p /root/deploy
                    exit
EOF
                    '''
                }
            }
        }

        stage('Copy Docker Compose and Files') {
            parallel {
                stage('Copy to AWS') {
                    steps {
                        sshagent(['aws-ssh-key']) {
                            sh '''
                            scp -o StrictHostKeyChecking=no -r Docker app digitalocean .env ec2-user@$AWS_SERVER_IP:~/deploy/
                            '''
                        }
                    }
                }
                stage('Copy to DigitalOcean') {
                    steps {
                        sshagent(['do-ssh-key']) {
                            sh '''
                            scp -o StrictHostKeyChecking=no -r Docker app digitalocean .env root@$DO_SERVER_IP:/root/deploy/
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy to AWS') {
            steps {
                sshagent(['aws-ssh-key']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ec2-user@$AWS_SERVER_IP << EOF
                    cd ~/deploy
                    docker-compose --env-file .env down || true
                    docker-compose --env-file .env up -d
                    docker ps -a
                    exit
EOF
                    '''
                }
            }
        }

        stage('Deploy to DigitalOcean') {
            steps {
                sshagent(['do-ssh-key']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no root@$DO_SERVER_IP << EOF
                    cd /root/deploy
                    docker-compose --env-file .env down || true
                    docker-compose --env-file .env up -d
                    docker ps -a
                    exit
EOF
                    '''
                }
            }
        }

        stage('Verify Deployment') {
            parallel {
                stage('Verify AWS Deployment') {
                    steps {
                        retry(2) {
                            sh '''
                            curl -s -o /dev/null -w "%{http_code}" http://$AWS_SERVER_IP:5000 || exit 1
                            '''
                        }
                    }
                }
                stage('Verify DigitalOcean Deployment') {
                    steps {
                        retry(2) {
                            sh '''
                            curl -s -o /dev/null -w "%{http_code}" http://$DO_SERVER_IP:5000 || exit 1
                            '''
                        }
                    }
                }
            }
        }
    }
}

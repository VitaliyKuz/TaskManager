version: '3.8'

services:
  flask_app:
    build:
      context: .
      dockerfile: Docker/Dockerfile-flask
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5000:5000"
    depends_on:
      - db
    restart: always

  digitalocean-exporter:
    build:
      context: .
      dockerfile: Docker/Dockerfile-digitalocean
    environment:
      - DO_API_TOKEN=${DO_API_TOKEN}
    ports:
      - "8000:8000"
    working_dir: /app
    volumes:
      - ./digitalocean:/app
      - ./app/requirements.txt:/app/requirements.txt
    restart: always

  db:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    restart: always

  cloudwatch-exporter:
    image: quay.io/prometheus/cloudwatch-exporter:latest
    container_name: cloudwatch-exporter
    ports:
      - "9106:9106" 
    volumes:
      - ./config.yml:/config/config.yml:ro 
    restart: always

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PROVISIONING_PATH=/etc/grafana/provisioning
    volumes:
      - grafana_data:/var/lib/grafana
      - ./Docker/grafana-provisioning:/etc/grafana/provisioning

volumes:
  db_data:
  grafana_data:
